#!/usr/bin/env bash
set -eu

# What is this?
#   Print basic system information.
#
# Usage:
#   $ ./proper7y
#
# Prerequisites:
#     Bash version >= 4.0
#
# Supported Software:
#     OS:
#         See following global variable `SUPPORTED_OS_IDS`.
#     Shell:
#         Bash
#         Zsh
#     Virtualization:
#         TODO:
#
# TODO:
#     Support new OS:
#         Android
#         iOS
#         ...

# -------------------------------------------------------------------

readonly PROPER7Y_VERSION="v0.8.0"

declare -l UNAME_CACHE_KERNEL_NAME="This_value_should_be_overridden"
declare -l UNAME_CACHE_MACHINE="This_value_should_be_overridden"

declare -l OS_FAMILY_ID="This_value_should_be_overridden"
declare -l OS_ID="This_value_should_be_overridden"
declare -l VIRTUALIZATION_ID="This_value_should_be_overridden"
declare -l CURRENT_SHELL_ID="This_value_should_be_overridden"

declare -al SUPPORTED_OS_FAMILY_IDS=( # Allowed OS_FAMILY_ID values
  "arch-based"
  "debian-based"
  "darwin-based"
)
declare -al SUPPORTED_OS_IDS=( # Allowed OS_ID values
  "archlinux"
  "endevouros"
  "manjaro"
  "debian"
  "kali"
  "ubuntu"
  "macos"
)
# Ref: https://man.archlinux.org/man/systemd-detect-virt.1.en
declare -al SUPPORTED_VIRTUALIZATION_IDS=( # Allowed VIRTUALIZATION_ID values
  "virtualbox"
  "vmware"
  "microsoft" # Used in GitHub Actions
  "docker"
  "wsl"
  "physical" # It's not a virtualized environment but a physical hardware.
  "unknown"
)
declare -al SUPPORTED_SHELL_IDS=( # Allowed SHELL_ID values
  "bash"
  "zsh"
  "unknown"
)

declare -A OS_NAMES=( # The key is OS_ID
  ["archlinux"]="Arch Linux"
  ["endevouros"]="EndeavourOS"
  ["manjaro"]="Manjaro"
  ["debian"]="Debian"
  ["kali"]="Kali Linux"
  ["ubuntu"]="Ubuntu"
  ["macos"]="macOS"
)
declare -A VIRTUALIZATION_NAMES=( # The key is VIRTUALIZATION_ID
  ["virtualbox"]="VirtualBox"
  ["vmware"]="VMware"
  ["microsoft"]="Hyper-V"
  ["docker"]="Docker"
  ["wsl"]="WSL"
  ["physical"]="Physical"
  ["unknown"]="Unknown"
)
declare -A SHELL_NAMES=( # The key is SHELL_ID
  ["bash"]="Bash"
  ["zsh"]="Zsh"
  ["unknown"]="Unknown"
)

# -------------------------------------------------------------------

init() {
  # Check prerequisites
  if [[ "${BASH_VERSINFO[0]}" -lt 4 ]]; then
    log_err "Must be Bash version >= 4.0."
    log_debug "Bash version: ${BASH_VERSINFO[0]}.${BASH_VERSINFO[1]}.${BASH_VERSINFO[2]}"
    exit 1
  fi

  cache_uname

  identify_os_family_id
  identify_os_id
  identify_virtualization_id
  identify_current_shell_id
}

# -------------------------------------------------------------------

main() {
  echo "proper7y $PROPER7Y_VERSION - Tiny Bash script to print basic system"
  echo "information. See: https://github.com/rnazmo/proper7y"

  echo "============================================================"

  # TODO: identify_os

  print_date
  print_virtualization
  print_cpu_arch
  print_os_name
  print_os_version
  print_current_shell
  print_bash_version

  case "$CURRENT_SHELL_ID" in
  'bash')
    # Do nothing
    ;;
  'zsh')
    print_zsh_version
    ;;
  esac

  # print_chassis
  # print_default_shell

  echo "============================================================"
}

# -------------------------------------------------------------------

# What is this?:
#     Caches the output of uname in a global variable for performance.
cache_uname() {
  local -a uname_cache

  # Receive the return value of uname into an array variable.
  # Ref: https://www.shellcheck.net/wiki/SC2207
  IFS=" " read -r -a uname_cache <<<"$(uname -sm)"

  UNAME_CACHE_KERNEL_NAME="${uname_cache[0]}"
  UNAME_CACHE_MACHINE="${uname_cache[1]}"
  readonly UNAME_CACHE_KERNEL_NAME
  readonly UNAME_CACHE_MACHINE
}

# Ref:
#     https://stackoverflow.com/a/17072017
#     https://stackoverflow.com/a/18434831
#     https://github.com/dylanaraps/neofetch/issues/433#issue-188679046
#     http://linuxmafia.com/faq/Admin/release-files.html
identify_os_family_id() {
  case "$UNAME_CACHE_KERNEL_NAME" in
  'linux')
    if [[ -f /etc/arch-release ]]; then
      OS_FAMILY_ID="arch-based"
    elif [[ -f /etc/debian_version ]]; then
      OS_FAMILY_ID="debian-based"
    elif [[ -f /etc/ubuntu_version ]]; then
      OS_FAMILY_ID="debian-based" # NOTE: Not "ubuntu-based" but "debian-based".
    else
      # OS_FAMILY_ID="linux-based"
      OS_FAMILY_ID="Unknown"
    fi
    ;;
  'darwin') OS_FAMILY_ID="darwin-based" ;;
  # 'freebsd') OS_FAMILY_ID="freebsd-based" ;;
  # 'openbsd') OS_FAMILY_ID="openbsd-based" ;;
  # 'netbsd') OS_FAMILY_ID="netbsd-based" ;;
  # cygwin* | msys* | mingw*) OS_FAMILY_ID="windows-based" ;;
  *) OS_FAMILY_ID="Unknown" ;;
  esac

  readonly OS_FAMILY_ID

  # Check if the UNAME_CACHE_KERNEL_NAME value is in SUPPORTED_OS_FAMILY_IDS
  if [[ ! "${SUPPORTED_OS_FAMILY_IDS[*]}" =~ ${OS_FAMILY_ID} ]]; then
    log_err "This script does not support the OS family: ${OS_FAMILY_ID}"
    return 1
  fi
}

identify_os_id() {
  case "$OS_FAMILY_ID" in
  'arch-based')
    if [[ -f /etc/manjaro-release ]]; then
      OS_ID="manjaro"
    elif [[ -f /etc/endevouros-release ]]; then
      OS_ID="endevouros"
    elif [[ -f /etc/arch-release ]]; then
      OS_ID="archlinux"
    fi
    ;;
  'debian-based')
    if [[ -f /etc/kali-version ]]; then
      OS_ID="kali"
    elif [[ -f /etc/debian_version ]]; then
      OS_ID="debian"
    elif [[ -f /etc/ubuntu_version ]]; then
      OS_ID="ubuntu"
    fi
    ;;
  'darwin-based') OS_ID="macos" ;;
  # 'freebsd-based') OS_ID="freebsd" ;;
  # 'openbsd-based') OS_ID="openbsd" ;;
  # 'netbsd-based') OS_ID="netbsd" ;;
  # 'windows-based') OS_ID="windows11" ;;
  *) OS_ID="Unknown" ;;
  esac

  readonly OS_ID

  # Check if the OS_ID value is in SUPPORTED_OS_IDS
  if [[ ! "${SUPPORTED_OS_IDS[*]}" =~ ${OS_ID} ]]; then
    log_err "This script does not support the OS ID: ${OS_ID}"
    return 1
  fi
}

# Detect virtualization (VM or Container).
identify_virtualization_id() {
  if command -v systemd-detect-virt &>/dev/null; then
    case "$(systemd-detect-virt)" in
    'oracle' | 'virtualbox') VIRTUALIZATION_ID="virtualbox" ;;
    'vmware') VIRTUALIZATION_ID="vmware" ;;
    'microsoft') VIRTUALIZATION_ID="microsoft" ;;
    'docker') VIRTUALIZATION_ID="docker" ;;
    'wsl') VIRTUALIZATION_ID="wsl" ;;
    'none') VIRTUALIZATION_ID="physical" ;;
    *) VIRTUALIZATION_ID="unknown" ;;
    esac
  elif command -v hostnamectl &>/dev/null; then
    if grep -q "Virtualization:" <<<"$(hostnamectl status)"; then
      case "$(hostnamectl status | grep "Virtualization:" | sed -e "s/ *Virtualization: //" | tr '[:upper:]' '[:lower:]')" in
      'oracle' | 'virtualbox') VIRTUALIZATION_ID="virtualbox" ;;
      'vmware') VIRTUALIZATION_ID="vmware" ;;
      'microsoft') VIRTUALIZATION_ID="microsoft" ;;
      'docker') VIRTUALIZATION_ID="docker" ;;
      'wsl') VIRTUALIZATION_ID="wsl" ;;
      *) VIRTUALIZATION_ID="unknown" ;;
      esac
    else
      VIRTUALIZATION_ID="physical"
    fi
  else
    VIRTUALIZATION_ID="unknown"
  fi

  readonly VIRTUALIZATION_ID

  # Check if the VIRTUALIZATION_ID value is in SUPPORTED_VIRTUALIZATION_IDS
  if [[ ! "${SUPPORTED_VIRTUALIZATION_IDS[*]}" =~ ${VIRTUALIZATION_ID} ]]; then
    log_err "This script does not support the VIRTUALIZATION_ID: ${VIRTUALIZATION_ID}"
    log_debug "systemd-detect-virt: $(systemd-detect-virt)"
    return 1
  fi
}

identify_current_shell_id() {
  # The parent process of the running 'proper7y' is probably the 'current shell' we want.
  # NOTE: In some environments, the fillowing may not work correctly.
  # Ref:
  #   https://tkuchiki.hatenablog.com/entry/2014/05/08/222135
  #   https://askubuntu.com/a/590903
  local -r parent_process_cmd=$(ps -cp "$PPID" -o command="")
  case "$parent_process_cmd" in
  *bash*)
    CURRENT_SHELL_ID="bash"
    ;;
  *zsh*)
    CURRENT_SHELL_ID="zsh"
    ;;
  *make*)
    local -i parent_process_id_of_the_parent_process_cmd
    parent_process_id_of_the_parent_process_cmd=$(ps -cp "$PPID" -o ppid=)
    local -r parent_process_cmd_of_the_parent_process_cmd=$(ps -cp "$parent_process_id_of_the_parent_process_cmd" -o command="")
    case "$parent_process_cmd_of_the_parent_process_cmd" in
    *bash*)
      CURRENT_SHELL_ID="bash"
      ;;
    *zsh*)
      CURRENT_SHELL_ID="zsh"
      ;;
    *)
      CURRENT_SHELL_ID="unknown"
      ;;
    esac
    ;;
  *)
    CURRENT_SHELL_ID="unknown"
    ;;
  esac

  readonly CURRENT_SHELL_ID

  # Check if the CURRENT_SHELL_ID value is in SUPPORTED_SHELL_IDS
  if [[ ! "${SUPPORTED_SHELL_IDS[*]}" =~ ${CURRENT_SHELL_ID} ]]; then
    log_err "This script does not support the CURRENT_SHELL_ID: ${CURRENT_SHELL_ID}"
    return 1
  fi
}

# -------------------------------------------------------------------

print_date() {
  local -r CURRENT_DATE="$(date '+%Y-%m-%d')"
  print_row "CURRENT DATE" "$CURRENT_DATE"
}

print_os_name() {
  local -r OS_NAME="${OS_NAMES[$OS_ID]}"
  print_row "OS NAME" "$OS_NAME"
}

print_os_version() {
  local OS_VERSION="Unknown"

  case "$UNAME_CACHE_KERNEL_NAME" in
  "linux")
    # Ref
    #   About /etc/os-release:
    #     https://stackoverflow.com/a/53015255
    #   About lsb_release command;
    #   What is the "No LSB modules are available." message?:
    #     https://exlight.net/linux/cmd/lsb_release/index.html
    OS_VERSION=$(lsb_release -rs)
    ;;
  "darwin")
    OS_VERSION=$(sw_vers -productVersion)
    ;;
  esac

  print_row "OS VERSION" "$OS_VERSION"
}

print_cpu_arch() {
  local CPU_ARCH="Unknown"
  CPU_ARCH="$UNAME_CACHE_MACHINE"
  print_row "CPU ARCH" "$CPU_ARCH"
}

print_virtualization() {
  local VIRTUALIZATION="Unknown"
  VIRTUALIZATION="${VIRTUALIZATION_NAMES[$VIRTUALIZATION_ID]}"
  print_row "VIRTUALIZATION" "$VIRTUALIZATION"
}

print_chassis() {
  local CHASSIS="Unknown"
  CHASSIS=$(hostnamectl status | grep "Chassis:" | sed "s/ *Chassis: //")
  print_row "CHASSIS" "$CHASSIS"
}

print_current_shell() {
  local CURRENT_SHELL="Unknown"
  CURRENT_SHELL="${SHELL_NAMES[$CURRENT_SHELL_ID]}"
  print_row "CURRENT SHELL" "$CURRENT_SHELL"
}

print_bash_version() {
  local -r BASH_VERSION="${BASH_VERSINFO[0]}.${BASH_VERSINFO[1]}.${BASH_VERSINFO[2]}"
  print_row "BASH VERSION" "$BASH_VERSION"
}

print_zsh_version() {
  local ZSH_VERSION="Unknown"
  local -r CMDNAME="zsh"

  if command -v "$CMDNAME" &>/dev/null; then
    ZSH_VERSION=$(zsh --version | sed "s/zsh //")
  else
    ZSH_VERSION="(Not Found)"
  fi

  print_row "ZSH VERSION" "$ZSH_VERSION"
}

# -------------------------------------------------------------------

# Pad right of a given string with spaces.
#
# TODO: Does this support only ASCII and UTF-8?
#
# Example Usage:
#   PADDED_HELLO="pad_with_spaces 'hello'"
#
pad_with_spaces() {
  local -r RAW="$1"
  local -r LENGTH="14"
  printf "%-*s" "$LENGTH" "$RAW"
}

# Print a row in format using given ROW_NAME and ROW_VALUE.
#
# Example Usage:
#   print_row "OS NAME" "Kali GNU/Linux Rolling"
#
print_row() {
  local -r ROW_NAME="$1"
  local -r ROW_VALUE="$2"
  local -r ROW_NAME_PADDED="$(pad_with_spaces "$ROW_NAME")"

  echo "${ROW_NAME_PADDED}: ${ROW_VALUE}"
}

log_debug() {
  local -r PREFIX="DEBUG:"
  echo "$PREFIX $1"
}

log_info() {
  local -r PREFIX="INFO :"
  echo "$PREFIX $1"
}

log_warn() {
  local -r PREFIX="WARN :" >&2
  echo "$PREFIX $1"
}

log_err() {
  local -r PREFIX="ERROR:" >&2
  echo "$PREFIX $1"
}

# -------------------------------------------------------------------

init

main
