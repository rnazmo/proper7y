#!/bin/bash
set -eu

# What is this?
#   Print basic system information.
#
# Usage:
#   $ ./proper7y
#
# Prerequisites:
#     Bash version >= 4.0
#
# Supported Software:
#     OS:
#         TODO:
#     Shell:
#         Bash
#         Zsh
#     Virtualization:
#         TODO:

readonly PROPER7Y_VERSION="v0.5.2"

# -------------------------------------------------------------------

init() {
  # Check prerequisites
  if [[ "${BASH_VERSINFO[0]}" -lt 4 ]]; then
    log_err "Must be Bash version >= 4.0."
    exit 1
  fi
}

# -------------------------------------------------------------------

main() {
  echo "proper7y $PROPER7Y_VERSION - Tiny Bash script to print basic system"
  echo "information. See: https://github.com/rnazmo/proper7y"

  echo "============================================================"

  # TODO: identify_os

  print_date
  print_os_name
  print_os_version
  print_current_shell
  print_bash_version
  print_zsh_version
  print_cpu_arch

  # TODO: print_virtualization

  # print_chassis
  # print_default_shell
  # print_kernel

  echo "============================================================"
}

# -------------------------------------------------------------------

print_date() {
  local -r CURRENT_DATE="$(date '+%Y-%m-%d')"
  print_row "CURRENT DATE" "$CURRENT_DATE"
}

print_os_name() {
  local OS_NAME="Unknown"

  case $(uname | tr '[:upper:]' '[:lower:]') in
  "linux")
    OS_NAME=$(hostnamectl status | grep "Operating System:" | sed -e "s/ *Operating System: //")
    ;;
  "darwin")
    OS_NAME=$(sw_vers -productName)
    ;;
  esac

  print_row "OS NAME" "$OS_NAME"
}

print_os_version() {
  local OS_VERSION="Unknown"

  case $(uname | tr '[:upper:]' '[:lower:]') in
  "linux")
    # Ref
    #   About /etc/os-release:
    #     https://stackoverflow.com/a/53015255
    #   About lsb_release command;
    #   What is the "No LSB modules are available." message?:
    #     https://exlight.net/linux/cmd/lsb_release/index.html
    OS_VERSION=$(lsb_release -rs)
    ;;
  "darwin")
    OS_VERSION=$(sw_vers -productVersion)
    ;;
  esac

  print_row "OS VERSION" "$OS_VERSION"
}

print_cpu_arch() {
  local CPU_ARCH="Unknown"
  CPU_ARCH="$(uname -m)"
  print_row "CPU ARCH" "$CPU_ARCH"
}

print_kernel() {
  local KERNEL="Unknown"
  KERNEL=$(uname -r)
  print_row "KERNEL" "$KERNEL"
}

print_chassis() {
  local CHASSIS="Unknown"
  CHASSIS=$(hostnamectl status | grep "Chassis:" | sed "s/ *Chassis: //")
  print_row "CHASSIS" "$CHASSIS"
}

# # TODO: Need to set LENFTH in pad_with_spaces function to 14 or higher.
# print_virtualization() {
#   local VIRTUALIZATION="Unknown"
#   # if [ "$CHASSIS" = "vm" ]; then
#   VIRTUALIZATION=$(hostnamectl status | grep "Virtualization:" | sed -e "s/ *Virtualization: //")
#   # fi
#   print_row "VIRTUALIZATION" "$VIRTUALIZATION"
# }

print_current_shell() {
  local CURRENT_SHELL="Unknown"

  # The parent process of the running 'proper7y' is probably the 'current shell' we want.
  # NOTE: In some environments, the fillowing may not work correctly.
  # Ref:
  #   https://tkuchiki.hatenablog.com/entry/2014/05/08/222135
  #   https://askubuntu.com/a/590903
  local PARENT_PROCESS_CMD="Unknown"
  PARENT_PROCESS_CMD=$(ps -cp "$PPID" -o command="")
  if echo "$PARENT_PROCESS_CMD" | grep -qs "bash"; then
    CURRENT_SHELL="Bash"
  elif echo "$PARENT_PROCESS_CMD" | grep -qs "zsh"; then
    CURRENT_SHELL="Zsh"
  fi

  print_row "CURRENT SHELL" "$CURRENT_SHELL"
}

print_bash_version() {
  local BASH_VERSION="Unknown"
  BASH_VERSION=$(bash --version | head -n 1 | sed "s/GNU bash, version //")
  print_row "BASH VERSION" "$BASH_VERSION"
}

print_zsh_version() {
  local ZSH_VERSION="Unknown"
  local -r CMDNAME="zsh"

  if command -v "$CMDNAME" &>/dev/null; then
    ZSH_VERSION=$(zsh --version | sed "s/zsh //")
  else
    ZSH_VERSION="(Not Found)"
  fi

  print_row "ZSH VERSION" "$ZSH_VERSION"
}

# -------------------------------------------------------------------

# Pad right of a given string with spaces.
#
# TODO: Does this support only ASCII and UTF-8?
#
# Example Usage:
#   PADDED_HELLO="pad_with_spaces 'hello'"
#
pad_with_spaces() {
  local -r RAW="$1"
  local -r LENGTH="13"
  printf "%-*s" "$LENGTH" "$RAW"
}

# Print a row in format using given ROW_NAME and ROW_VALUE.
#
# Example Usage:
#   print_row "OS NAME" "Kali GNU/Linux Rolling"
#
print_row() {
  local -r ROW_NAME="$1"
  local -r ROW_VALUE="$2"
  local -r ROW_NAME_PADDED="$(pad_with_spaces "$ROW_NAME")"

  echo "${ROW_NAME_PADDED}: ${ROW_VALUE}"
}

# OS="Unknown"
# identify_os() {
#   # Ref:
#   #   https://stackoverflow.com/a/17072017
#   #   https://stackoverflow.com/a/18434831
#   #   https://github.com/dylanaraps/neofetch/issues/433#issue-188679046
#   case $(uname | tr '[:upper:]' '[:lower:]') in
#   linux*)
#     # Ref: http://linuxmafia.com/faq/Admin/release-files.html
#     if [ -f /etc/debian_version ]; then
#       OS="debian-based"
#     elif [ -f /etc/redhat-release ]; then
#       OS="reahat-based"
#     elif [ -f /etc/arch-release ]; then
#       OS="arch"
#     fi
#     # TODO: Identify Bash on Windows, Android, (WSL, Docker, VM)
#     ;;
#   darwin*)
#     OS="macos"
#     ;;
#   esac
# }
# identify_os

log_debug() {
  local -r PREFIX="DEBUG:"
  echo "$PREFIX $1"
}

log_info() {
  local -r PREFIX="INFO :"
  echo "$PREFIX $1"
}

log_warn() {
  local -r PREFIX="WARN :" >&2
  echo "$PREFIX $1"
}

log_err() {
  local -r PREFIX="ERROR:" >&2
  echo "$PREFIX $1"
}

# -------------------------------------------------------------------

init

main
